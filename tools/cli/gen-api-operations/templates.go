package main

var apiOperationContent = `
// This is an autogenerated file. DO NOT MODIFY
package v2

import (
	"context"
	"net/http"
	"time"

	"github.com/RJPearson94/twilio-sdk-go/client"
)

{{$input := .Input}}{{if $input}} 
type {{$input.Name}} struct { {{range $index, $property := $input.Properties }}
{{ $property.Name }} {{ $property.Type }} {ifFormEncodedDataAddTags} {{end}}
}{{end}}

{{$response := .Response}} {{if $response}} 
type {{$response.Name}} struct { {{range $index, $property := $response.Properties }}
{{ $property.Name }} {{if eq $property.Required false}}*{{end}}{{ $property.Type }} {ifJSONResponseAddTags} {{end}}
}{{end}}

func (service {{.Service}}Service) {{.Name}}({{if $input}}input *{{$input.Name}}{{end}}) ({{if $response}}*{{$response.Name}}, {{end}}error) {
	return service.{{.Name}}WithContext(context.Background(){{if $input}}, input{{end}})
}

func (service {{.Service}}Service) {{.Name}}WithContext(context context.Context{{if $input}}, input *{{$input.Name}}{{end}}) ({{if $response}}*{{$response.Name}}, {{end}}error) {
	op := client.Operation{
		HTTPMethod: http.Method{{.HTTPMethod}},
		HTTPPath:   pathTemplates.{{.Path}}, {{if $input}}
		ContentType: client.{{$input.Type}},{{end}} {{if .PathParams}}
		PathParams: map[string]string{ {{range $index, $pathParam := .PathParams }}
			pathParamNames.{{ $pathParam.PathParamName }}: {{ if eq $pathParam.Value.OnService true}} service.{{$pathParam.Value.Property}}, {{end}} {{end}}
		},{{end}}
	}

	{{if $response}}output := &{{$response.Name}}{}{{end}}
	if err := service.client.Send(context, op, {{if $input}}input{{else}}nil{{end}}, {{if $response}}output{{else}}nil{{end}}); err != nil {
		return {{if $response}}nil, {{end}}err
	}
	return {{if $response}}output, {{end}}nil
}
`

var ifFormEncodedDataAddTags = "{{if eq $input.Type \"URLEncoded\"}} `{{if eq $property.Required true}}validate:\"required\" {{end}}mapstructure:\"{{$property.Value}}{{if eq $property.Required false}},omitempty{{end}}\"` {{end}}"
var ifJSONResponseAddTags = "{{if eq $response.Type \"JSON\"}} `json:\"{{$property.Value}}{{if eq $property.Required false}},omitempty{{end}}\"` {{end}}"
