package main

var apiClientContent = `// This is an autogenerated file. DO NOT MODIFY
package {{.Name | ToSnakeCase}}

import (
	"github.com/RJPearson94/twilio-sdk-go/client"
)

type Client struct {
	client *client.Client {{if .Properties}} {{range $key, $value := .Properties }}
	{{ $key }} {{ $value.DataType }} {{end}} {{end}} {{if .SubClients}} {{range $key, $subClient := .SubClients }}
	{{ $subClient.Name | ToCamel}} {{if $subClient.Function}} func({{range $key, $functionParams := $subClient.Function.Parameters }} {{$functionParams.DataType}}, {{end}}) {{end}} *{{$subClient.Name | ToSnakeCase}}.Client {{end}} {{end}}
}

func New(client *client.Client {{if .Properties}} {{range $key, $value := .Properties }},{{ $key}} {{ $value.DataType }} {{end}} {{end}}) *Client {
	return &Client{
		client: client,{{if .Properties}} {{range $key, $value := .Properties }}
		{{ $key }}: {{ $key }}, {{end}} {{end}}{{if .SubClients}} {{range $key, $subClient := .SubClients }}
		{{ $subClient.Name | ToCamel}}: {{if $subClient.Function}} func({{range $key, $functionParams := $subClient.Function.Parameters }} {{$key}} {{$functionParams.DataType}}, {{end}}) *{{$subClient.Name | ToSnakeCase}}.Client { return {apiNewSubClient} } {{else}} {apiNewSubClient} {{end}}, {{end}} {{end}}
	}
}
`

var apiNewSubClient = "{{$subClient.Name | ToSnakeCase}}.New(client{{if .Properties}}{{range $key, $value := .Properties }}, {{if $value.ParentProperty }}{{ $value.ParentProperty }} {{else}} {{if $value.FunctionParameter }}{{ $value.FunctionParameter }} {{else}} {{ $key }} {{end}} {{end}} {{end}} {{end}})"

var apiOperationContent = `// This is an autogenerated file. DO NOT MODIFY
package {{.Service | ToSnakeCase}}

import (
	"context"
	"net/http"
	"time"
	"strconv"

	"github.com/RJPearson94/twilio-sdk-go/client"
)

{{$input := .Input}} {{if $input}} 
{{if $input.AdditionalStructs}} {{range $index, $struct := $input.AdditionalStructs }}
type {{$struct.Name}} struct { {{range $index, $property := $struct.Properties }}
{{ $property.Name }} {{if eq $property.Required false}}{{if ne $property.Type "string"}}*{{end}}{{end}}{{ $property.Type }} {ifFormEncodedDataAddTags} {{end}}
} 
{{end}} {{end}}
type {{$input.Name}} struct { {{range $index, $property := $input.Properties }}
{{ $property.Name }} {{if eq $property.Required false}}{{if ne $property.Type "string"}}*{{end}}{{end}}{{ $property.Type }} {ifFormEncodedDataAddTags} {{end}}
} {{end}}

{{$response := .Response}} {{if $response}}
{{if $response.AdditionalStructs}} {{range $index, $struct := $response.AdditionalStructs }}
type {{$struct.Name}} struct { {{range $index, $property := $struct.Properties }}
{{ $property.Name }} {{if eq $property.Required false}}{{if ne $property.Type "string"}}*{{end}}{{end}}{{ $property.Type }} {ifJSONResponseAddTags} {{end}}
} 
{{end}} {{end}}
type {{$response.Name}} struct { {{range $index, $property := $response.Properties }}
{{ $property.Name }} {{if eq $property.Required false}}*{{else}}{{ if $property.OverrideDataType }}*{{end}}{{end}}{{ $property.Type }} {ifJSONResponseAddTags} {{end}}
} {{end}}

func (c Client) {{.Name}}({{if $input}}input *{{$input.Name}}{{end}}) ({{if $response}}*{{$response.Name}}, {{end}}error) {
	return c.{{.Name}}WithContext(context.Background(){{if $input}}, input{{end}})
}

func (c Client) {{.Name}}WithContext(context context.Context{{if $input}}, input *{{$input.Name}}{{end}}) ({{if $response}}*{{$response.Name}}, {{end}}error) {
	op := client.Operation{ {{if .Overrides}}
		OverrideBaseURI: utils.String(client.CreateBaseURI("{{.Overrides.SubDomain}}", "{{.Overrides.ApiVersion}}")),{{end}}
		HTTPMethod: http.Method{{.HTTPMethod}},
		HTTPPath:   "{{.Path}}", {{if $input}}
		ContentType: client.{{$input.Type}},{{end}} {{if .PathParams}}{{$propertiesMap := .Properties}}
		PathParams: map[string]string{ {{range $index, $pathParam := .PathParams }}
			"{{ $pathParam.PathParamName }}": {{ if eq $pathParam.Value.OnService true}} {{if eq (index $propertiesMap $pathParam.PathParamName).DataType "int"}} strconv.Itoa(c.{{$pathParam.Value.Property}}) {{else}} c.{{$pathParam.Value.Property}} {{end}}, {{end}} {{end}}
		},{{end}}
	}

	{{if $response}}output := &{{$response.Name}}{}{{end}}
	if err := c.client.Send(context, op, {{if $input}}input{{else}}nil{{end}}, {{if $response}}output{{else}}nil{{end}}); err != nil {
		return {{if $response}}nil, {{end}}err
	}
	return {{if $response}}output, {{end}}nil
}
`

var ifFormEncodedDataAddTags = "`{{if eq $property.Required true}}validate:\"required\" {{end}}{{if eq $input.Type \"URLEncoded\"}}form:\"{{$property.Value}}{{if eq $property.Required false}},omitempty{{end}}\"{{end}}{{if eq $input.Type \"FormData\"}}mapstructure:\"{{$property.Value}}{{if eq $property.Required false}},omitempty{{end}}\"{{end}}`"
var ifJSONResponseAddTags = "{{if eq $response.Type \"JSON\"}} `json:\"{{$property.Value}}{{ if $property.OverrideDataType }},{{ $property.OverrideDataType }}{{end}}{{if eq $property.Required false}},omitempty{{end}}\"` {{end}}"
